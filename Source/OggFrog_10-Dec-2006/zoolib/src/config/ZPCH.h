/*  @(#) $Id: ZPCH.h,v 1.4 2003/11/19 18:17:27 agreen Exp $ */

/* ------------------------------------------------------------
Copyright (c) 2000 Andrew Green and Learning in Motion, Inc.
http://www.zoolib.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------ */

#if !defined(__MWERKS__)
#	error "ZPCH.h can only be used with CodeWarrior (for now at least)"
#endif


// Ensure that the precompiled header matches the target build settings.
#pragma check_header_flags on


// Set up the filename into/from which precompiled data will be placed/read.
#if __INTEL__
#	if __option(sym)
#		define ZPRECOMPILE__FileName "precomp_Win32_debug"
#	else
#		define ZPRECOMPILE__FileName "precomp_Win32"
#	endif
#elif defined(powerc)
#	if __MACH__
#		if __option(sym)
#			define ZPRECOMPILE__FileName "precomp_Mach_debug"
#		else
#			define ZPRECOMPILE__FileName "precomp_Mach"
#		endif
#	elif TARGET_API_MAC_CARBON
#		if __option(profile)
#			if __option(sym)
#				define ZPRECOMPILE__FileName "precomp_Carbon_debug_prof"
#			else
#				define ZPRECOMPILE__FileName "precomp_Carbon_prof"
#			endif
#		else
#			if __option(sym)
#				define ZPRECOMPILE__FileName "precomp_Carbon_debug"
#			else
#				define ZPRECOMPILE__FileName "precomp_Carbon"
#			endif
#		endif
#	else
#		if __option(profile)
#			if __option(sym)
#				define ZPRECOMPILE__FileName "precomp_MacPPC_debug_prof"
#			else
#				define ZPRECOMPILE__FileName "precomp_MacPPC_prof"
#			endif
#		else
#			if __option(sym)
#				define ZPRECOMPILE__FileName "precomp_MacPPC_debug"
#			else
#				define ZPRECOMPILE__FileName "precomp_MacPPC"
#			endif
#		endif
#	endif
#else
#	if __option(profile)
#		if __option(sym)
#			define ZPRECOMPILE__FileName "precomp_Mac68K_debug_prof"
#		else
#			define ZPRECOMPILE__FileName "precomp_Mac68K_prof"
#		endif
#	else
#		if __option(sym)
#			define ZPRECOMPILE__FileName "precomp_Mac68K_debug"
#		else
#			define ZPRECOMPILE__FileName "precomp_Mac68K"
#		endif
#	endif
#endif


#if __option(precompile)
	// We're precompiling this file.

	// Force the C++ compiler to be active, because if this file was included
	// from a .pch file (rather than a .pch++ file) then the C compiler will be what
	// actually processes this file, which causes problems when working with some windows headers.
#	pragma cplusplus on

	// Tell the compiler the name of the file into which the precompilation data is to
	// be dumped (the name was set above).
# 	define ZPRECOMPILE_PragmaStatement precompile_target ZPRECOMPILE__FileName
#	pragma ZPRECOMPILE_PragmaStatement

#	if __INTEL__
#		include <ansi_prefix.Win32.h>
#		include "ZWinHeader.h"
#	elif __MACH__
#		include <Carbon/Carbon.h>
#	elif TARGET_API_MAC_CARBON
#		include <Carbon.h>
#	else
#		define OBSOLETE 0
#		define OLDROUTINENAMES 0
#		define OLDROUTINELOCATIONS 0

#		ifndef STRICT_CONTROLS
#			define STRICT_CONTROLS 1
#		endif

#		ifndef STRICT_WINDOWS
#			define STRICT_WINDOWS 1
#		endif
#		include <MacHeaders.c>
#	endif

#else // __option(precompile)
	// As we're not actually precompiling, we simply include the file that was generated by the
	// branch above, but only for C++ code.
#	if defined(__cplusplus)
#		include ZPRECOMPILE__FileName
#	endif

	// We need to include zconfig.h in prefix file so that library-type code
	// will see the fixups present in zconfigl.h.
	#include "zconfig.h"

#endif // __option(precompile)
